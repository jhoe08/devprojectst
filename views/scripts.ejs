<!--   Core JS Files   -->
<script src="/assets/js/core/jquery-3.7.1.min.js"></script>
<script src="/assets/js/core/popper.min.js"></script>
<script src="/assets/js/core/bootstrap.min.js"></script>

<!-- jQuery Scrollbar -->
<script src="/assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js"></script>

<!-- Chart JS -->
<script src="/assets/js/plugin/chart.js/chart.min.js"></script>

<!-- jQuery Sparkline -->
<script src="/assets/js/plugin/jquery.sparkline/jquery.sparkline.min.js"></script>

<!-- Chart Circle -->
<script src="/assets/js/plugin/chart-circle/circles.min.js"></script>

<!-- Datatables -->
<script src="/assets/js/plugin/datatables/datatables.min.js"></script>
<!-- <script src="/assets/js/pages/employees.js"></script> -->

<!-- Bootstrap Notify -->
<script src="/assets/js/plugin/bootstrap-notify/bootstrap-notify.min.js"></script>

<!-- jQuery Vector Maps -->
<script src="/assets/js/plugin/jsvectormap/jsvectormap.min.js"></script>
<script src="/assets/js/plugin/jsvectormap/world.js"></script>
<script src="/assets/js/plugin/jsvectormap/world-merc.js"></script>
<!-- <script src="/assets/js/plugin/jsvectormap/country-ph-r07.js"></script> -->

<!-- Sweet Alert -->
<script src="/assets/js/plugin/sweetalert/sweetalert.min.js"></script>

<!-- Kaiadmin JS -->
<script src="/assets/js/kaiadmin.min.js"></script>

<!--   ExpressJS Files   -->
<script src="/socket.io/socket.io.js"></script>
<script type="module" src="/assets/js/index.js"></script>
<!-- <script>
    const socket = io()
</script> -->
<!-- Kaiadmin DEMO methods, don't include it in your project! -->
<script src="/assets/js/timer.js"></script>
<script src="/assets/js/setting-demo.js"></script>
<script src="/assets/js/demo.js"></script>
<script src="/assets/js/misc.js"></script>
<script src="/assets/js/upload.js"></script>


<script>
  function handleLeave(evt, item, legend) {
    legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {
      colors[index] = color.length === 9 ? color.slice(0, -2) : color;
    });
    legend.chart.update();
  }
  function handleHover(evt, item, legend) {
    legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {
      colors[index] = index === item.index || color.length === 9 ? color : color + '4D';
    });
    legend.chart.update();
  }
  function generateHexColors(n) {
    const colors = [];
    for (let i = 0; i < n; i++) {
      const hexColor = "#" + Math.floor(Math.random() * 16777215).toString(16);
      colors.push(hexColor);
    }
    return colors;
  }

  const colors = generateHexColors(13);

</script>