<!--   Core JS Files   -->
<script src="/assets/js/core/jquery-3.7.1.min.js"></script>
<script src="/assets/js/core/popper.min.js"></script>
<script src="/assets/js/core/bootstrap.min.js"></script>

<!-- jQuery Scrollbar -->
<script src="/assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js"></script>

<!-- Chart JS -->
<script src="/assets/js/plugin/chart.js/chart.min.js"></script>

<!-- jQuery Sparkline -->
<script src="/assets/js/plugin/jquery.sparkline/jquery.sparkline.min.js"></script>

<!-- Chart Circle -->
<script src="/assets/js/plugin/chart-circle/circles.min.js"></script>

<!-- Datatables -->
<script src="/assets/js/plugin/datatables/datatables.min.js"></script>
<!-- <script src="/assets/js/pages/employees.js"></script> -->

<!-- Bootstrap Notify -->
<script src="/assets/js/plugin/bootstrap-notify/bootstrap-notify.min.js"></script>

<!-- jQuery Vector Maps -->
<script src="/assets/js/plugin/jsvectormap/jsvectormap.min.js"></script>
<script src="/assets/js/plugin/jsvectormap/world.js"></script>
<script src="/assets/js/plugin/jsvectormap/world-merc.js"></script>
<!-- <script src="/assets/js/plugin/jsvectormap/country-ph-r07.js"></script> -->

<!-- Sweet Alert -->
<script src="/assets/js/plugin/sweetalert/sweetalert.min.js"></script>

<!-- Kaiadmin JS -->
<script src="/assets/js/kaiadmin.min.js"></script>

<!--   ExpressJS Files   -->
<script src="/socket.io/socket.io.js"></script>
<script type="module" src="/assets/js/index.js"></script>
<!-- <script>
    const socket = io()
</script> -->
<!-- Kaiadmin DEMO methods, don't include it in your project! -->
<script src="/assets/js/timer.js"></script>
<script src="/assets/js/setting-demo.js"></script>
<script src="/assets/js/demo.js"></script>
<script src="/assets/js/misc.js"></script>
<script src="/assets/js/upload.js"></script>
<script>
    function handleLeave(evt, item, legend) {
        legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {
            colors[index] = color.length === 9 ? color.slice(0, -2) : color;
        });
        legend.chart.update();
    }
    function handleHover(evt, item, legend) {
        legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {
            colors[index] = index === item.index || color.length === 9 ? color : color + '4D';
        });
        legend.chart.update();
    }
    function generateHexColors(n) {
        const colors = [];
        for (let i = 0; i < n; i++) {
            const hexColor = "#" + Math.floor(Math.random() * 16777215).toString(16);
            colors.push(hexColor);
        }
        return colors;
    }

    const colors = generateHexColors(13);
    if('<%=path%>' == '' || '<%=path%>' == '/') {
      let classification = {}
      try {
        classification = JSON.parse(`<%- perClassification || {} %>`);
      } catch (error) {
        if (error instanceof ReferenceError) {
          console.log("Error: Variable is not defined.");
        } else {
          console.log("Some other error occurred:", error);
        }
        classification = {};  // Fallback to empty object if JSON parsing fails
      }
        const classificationLabel = Object.keys(classification);   // Array of keys
        const classificationData = Object.values(classification);

        var pieChart = document.getElementById("pieChart")

        if(pieChart) {
          pieChart.getContext("2d")
          var myPieChart = new Chart(pieChart, {
            type: "pie",
            data: {
              datasets: [{
                  label: 'Dataset 1',
                  data: classificationData,
                  backgroundColor: generateHexColors(classificationData.length),
                  borderWidth: 0,
                },],
              labels: classificationLabel,
            },
            options: {
              responsive: true,
              maintainAspectRatio: true,
              legend: {
                position: "bottom",
                labels: {
                  fontColor: "rgb(154, 154, 154)",
                  fontSize: 11,
                  usePointStyle: true,
                  padding: 20,
                },
              },
            //   title: {
            //     display: true,
            //     text: 'PR Classification'
            //   },
              pieceLabel: {
                render: "percentage",
                fontColor: "white",
                fontSize: 18,
              },
              tooltips: true,
              layout: {
                padding: {
                  left: 20,
                  right: 20,
                  top: 20,
                  bottom: 20,
                },
              },
            },
          });
        }
    
    }
    
    
    
</script>